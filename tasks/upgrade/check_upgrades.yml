- name: Ensure kubeadm-{{ kubernetes_version }} is installed (RHEL)
  yum:
    update_cache: true
    name:
      - kubeadm-{{ kubernetes_version }}
    enablerepo: kubernetes
    state: present
  when: 'ansible_os_family == "RedHat"'

- name: Ensure kubeadm-{{ kubernetes_version }} is installed (deb)
  apt:
    update_cache: true
    name:
      - kubeadm={{ kubernetes_version }}-00
    state: present
  when: 'ansible_os_family == "Debian"'

- name: Get the changes seen by kubeadm
  command: "kubeadm upgrade diff --config /etc/kubeadm/config.yaml"
  register: upgrade_diff_raw
  changed_when: false
  delegate_to: "{{ kubernetes_kubeadm_target }}"

- name: Get nodes informations
  k8s_info:
    kind: Node
    kubeconfig: "{{ kubernetes_kubeconfig_file }}"
  register: node_list_version
  delegate_to: localhost

- name: Get nodes versions
  set_fact:
    nodes_versions: "{{ node_list_version|json_query('resources[*].status.nodeInfo.kubeletVersion')|unique|sort }}"

- name: Check nodes version consistency across the cluster
  assert:
    that:
      - nodes_versions|length == 1
    fail_msg: "Inconsistent cluster! {{ nodes_versions|length }} versions of node found"
    success_msg: "Version consistency verified"
  when: kubernetes_upgrade_consistency_check

- name: Set the current version of the cluster
  set_fact:
    cluster_version: "{{ nodes_versions[0] | regex_replace('^v') }}"

- name: Check if the cluster needs an upgrade
  set_fact:
    need_upgrade: "{% if cluster_version != kubernetes_version  or upgrade_diff_raw.stdout_lines|length > 0 or (nodes_versions|length > 1 and not kubernetes_upgrade_consistency_check)%}{{ true }}{% else %}{{ false }}{% endif %}"

- name: Get the upgrade plan
  command: "kubeadm upgrade plan"
  changed_when: false
  register: kubeadm_upgrade_plan
  delegate_to: "{{ kubernetes_kubeadm_target }}"

- name: Set the fact for all play hosts
  set_fact:
    need_upgrade: "{{ need_upgrade }}"
    upgrade_plan: "{{ kubeadm_upgrade_plan.stdout }}"
    upgrade_diff: "{{ upgrade_diff_raw.stdout }}"
  delegate_to: "{{ item }}"
  with_items: "{{ play_hosts }}"
  run_once: yes

- name: Check upgrade result
  debug: var=need_upgrade
