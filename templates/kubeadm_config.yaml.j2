---
apiVersion: kubeadm.k8s.io/v1beta2
kind: InitConfiguration
nodeRegistration:
  kubeletExtraArgs:
{% if kubernetes_cgroup_driver is defined %}
    cgroup-driver: "{{ kubernetes_cgroup_driver }}"
{% endif %}
{% if kubernetes_cloud_provider is defined %}
    cloud-provider: "{{ kubernetes_cloud_provider }}"
{% endif %}
{% if node_name is defined %}
  name: {{ node_name }}
{% endif %}
localAPIEndpoint:
  advertiseAddress: "{{ kubernetes_api_server_advertise_address | default(ansible_default_ipv4.address) }}"
  bindPort: {{ kubernetes_api_server_port }}
---
apiVersion: kubeadm.k8s.io/v1beta2
kind: ClusterConfiguration
clusterName: {{ kubernetes_cluster_name }}
kubernetesVersion: {{ kubernetes_version }}
networking:
  podSubnet: "{{ kubernetes_pod_subnet | default(kubernetes_default_pod_cidr) }}"
{% if kubernetes_service_subnet is defined %}
  serviceSubnet: {{ kubernetes_service_subnet }}
{% endif %}
controlPlaneEndpoint: "{{ api_endpoint }}:{{ kubernetes_control_plane_port }}"
# etcd:
#   local:
#     dataDir: /var/lib/etcd
imageRepository: {{ kubernetes_image_repository | default("k8s.gcr.io") }}
apiServer:
  extraArgs:
{% if kubernetes_client_ca_file is defined %}
    client-ca-file: /etc/kubernetes/pki/client_ca.pem
{% endif %}
  certSANs:
  - "{{ api_endpoint }}"
controllerManager:
  extraArgs:
{% if kubernetes_pki is defined %}
    tls-cert-file: /etc/kubernetes/pki/kube-controller-manager.crt
    tls-private-key-file: /etc/kubernetes/pki/kube-controller-manager.key
{% if "ca_chain" in kubernetes_pki %}
    root-ca-file: /etc/kubernetes/pki/ac_full_chain.crt
{% endif %}
{% endif %}
{% if kubernetes_kube_controller_manager_bind_address is defined %}
    bind-address: {{ kubernetes_kube_controller_manager_bind_address }}
{% endif %}
{% if kubernetes_kube_controller_manager_port is defined %}
    port: "{{ kubernetes_kube_controller_manager_port }}"
{% endif %}
scheduler:
  extraArgs:
{% if kubernetes_pki is defined %}
    tls-cert-file: /etc/kubernetes/pki/kube-scheduler.crt
    tls-private-key-file: /etc/kubernetes/pki/kube-scheduler.key
{% endif %}
{% if kubernetes_kube_scheduler_bind_address is defined %}
    bind-address: {{ kubernetes_kube_scheduler_bind_address }}
{% endif %}
{% if kubernetes_kube_scheduler_port is defined %}
    port: "{{ kubernetes_kube_scheduler_port }}"
{% endif %}
{% if kubernetes_pki is defined %}
  extraVolumes:
  - name: "k8s-certs-key"
    hostPath: "/etc/kubernetes/pki/kube-scheduler.key"
    mountPath: "/etc/kubernetes/pki/kube-scheduler.key"
    readOnly: true
    pathType: File
  - name: "k8s-certs-crt"
    hostPath: "/etc/kubernetes/pki/kube-scheduler.crt"
    mountPath: "/etc/kubernetes/pki/kube-scheduler.crt"
    readOnly: true
    pathType: File
{% endif %}
---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
serverTLSBootstrap: true
{% if kubernetes_kubelet_config is defined %}
{{ kubernetes_kubelet_config | to_nice_yaml }}
{% endif %}
---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
mode: {{ kubernetes_proxy_mode }}
{% if kubernetes_proxy_mode == "ipvs" %}
ipvs:
  syncPeriod: {{ kubernetes_proxy_mode_ipvs_sync_period | default('30s') }}
  minSyncPeriod: {{ kubernetes_proxy_mode_ipvs_min_sync_period | default('2s') }}
  scheduler: {{ kubernetes_proxy_mode_ipvs_scheduler | default('rr') }}
{% endif %}
{% if kubernetes_proxy_mode == "iptables" %}
iptables:
  syncPeriod: {{ kubernetes_proxy_mode_iptables_sync_period | default('30s') }}
  minSyncPeriod: {{ kubernetes_proxy_mode_iptables_min_sync_period | default('2s') }}
{% endif %}
{% if kubernetes_kube_proxy_metrics_bind_address is defined %}
metricsBindAddress: {{ kubernetes_kube_proxy_metrics_bind_address }}
{% endif %}
